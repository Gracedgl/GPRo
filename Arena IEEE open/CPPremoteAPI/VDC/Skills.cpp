#include <Skills.h>
#include <extras.h>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <cv.h>
#include <opencv2/opencv.hpp>
#include <math.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <functionsOpenCV.h>
#include <neuron.h>

using namespace cv;
using namespace std;


VDC vdc;

/*
SKILLS::SKILLS() {
    sensor[8] = {};
    joint[9] = {};
    angle[5] = {};



}
 */

void SKILLS::connectToRobot() {

    /* inicialização dos motores do lado esquerdo 
    NOME DO JOIN MOTOR  \/ AONDE ELE VAI GUARDAR \/                               */
    vdc.conectJoints("Motor_esquerdo_Tras", joint[1]);
    vdc.conectJoints("Motor_esquerdo_frente", joint[3]);


    // inicialização dos motores do lado direito 
    vdc.conectJoints("Motor_direito_frente", joint[0]);
    vdc.conectJoints("Motor_direito_Tras", joint[2]);



    //  juntas da GARRA
    for (int i = 4; i < 8; i++) { // 
        vdc.conectJoints("Joint#" + std::to_string(i - 3), joint[i]);


    }

    // inicialização dos sensores de proximidade  (remoteApi)
    for (int i = 0; i < 8; i++) {
        vdc.conectProximitySensors("Proximity_sensor_" + std::to_string(i + 1), sensor[i]);
    }

    vdc.conectJoints("Webcam", Webcam);






}

double SKILLS::degree(double Degree) {
    return (Degree * 3.14159265359) / 180;
}

void SKILLS::seguidorDeParede() {
    //joint#1 == 4| joint#2 == 5 | joint#3 == 6 ...
    float velocityLeft = 0.75;
    float velocityRight = 0.75;
    float dist[8];


    for (int i = 0; i < 8; i++) {

        dist[i] = vdc.getDistance(sensor[i]);
        // sensor[0] =  Proximity_sensor_1 , sensor[1] = Proximity_sensor_2 ... 
    }

    if (dist[2] < 0.2) {

        velocityLeft = 2.0 * degree(15);
        velocityRight = 1.75;


    } else if (dist[2] > 0.22 && dist[2] != 500) {
        velocityLeft = 1.75;
        velocityRight = 2.0 * degree(15);

    } else if (dist[2] > 100) {

    }

    if (dist[4] < 0.33 || dist[5] < 0.33) {
        velocityLeft = -1;
        velocityRight = 1;

    }

    while (dist[2] < 0.3 && dist[3] < 0.3 || dist[0] < 0.3 && dist[1] < 0.3) {
        velocityLeft = -1;
        velocityRight = 1;
    }







    std::cout << "dist[0]: " << dist[0] << " dist[2]: " << dist[2] << " dist[7]: " << dist[7] << std::endl;




    SKILLS::setVelocityInRobot(velocityRight, velocityLeft);


}

void SKILLS::testJunta() {



    for (int i = 4; i < 9; i++) {
        if (i == 5 && angle[1] < 0.09) //Joint#2 movimento linear
        {
            angle[1] += 0.0005;
            vdc.setJointPosition(joint[i], angle[1]);

        } else if (i == 6 && angle[2] < degree(180) && angle[1] >= 0.030) // Joint#3
        {
            angle[2] += 0.01;
            vdc.setJointPosition(joint[i], angle[2]);
        } else if (i == 4 && angle[0] < degree(40) && angle[4] >= 0.030 && angle[2] >= degree(90)) //joint#1
        {
            angle[0] += 0.003;
            vdc.setJointPosition(joint[i], angle[0]);

        }
        //
        //joint#5

        if (i == 8 && angle[4] < degree(60)) {
            angle[4] += 0.01;
            vdc.setJointPosition(joint[7], angle[4]);

        }



    }




}

void SKILLS::testGetImage() {
    Mat image;
    vdc.debug = true;
    if (vdc.imageVrepToOpencv(Webcam, image)) {

    }



}

void SKILLS::testSetImage() {
    vdc.setImageVisionSensor(Webcam);
}

void SKILLS::testReadCam() {
    vdc.readVisionSensor(Webcam);
}

void SKILLS::goToTank() {
    Mat imageVrep;
    int rx, ry;
    int q3 = 240; // dividi o eixo x da imagem em 7 quartis  
    int q5 = 400;
    float velocityRight = 1;
    float velocityLeft = 1;

    if (vdc.imageVrepToOpencv(Webcam, imageVrep)) {
        if (imageVrep.data && debug) {

            namedWindow("vrep2", CV_WINDOW_AUTOSIZE);
            imshow("vrep2", imageVrep);
            waitKey(30);

        }
        findRedColorMass(imageVrep, rx, ry);

        if (debug) {
            cout << "posição x do tank: " << rx << " y: " << ry << endl;
        }


        if (rx < q3)
            velocityLeft = 0;
        else if (rx > q5)
            velocityRight = 0;





        SKILLS::setVelocityInRobot(velocityRight, velocityLeft);


    }



}

void SKILLS::WhereIsTheCow() {
    Mat image;
    float rx = 123;
    float velocityLeft = 1;
    float velocityRight = 1;

    if (vdc.imageVrepToOpencv(Webcam, image)) {
        rx = findCow(image);
        cout << rx << endl;


        if (rx < 0.01)
            velocityLeft = 0;
        else if (rx > 0.01)
            velocityRight = 0;

        SKILLS::setVelocityInRobot(velocityRight, velocityLeft);

    }




}

void SKILLS::setVelocityInRobot(float velocityRight, float velocityLeft) {

    // atualiza velocidades dos motores
    vdc.setJointVelocity(joint[0], velocityRight);
    vdc.setJointVelocity(joint[2], velocityRight);

    vdc.setJointVelocity(joint[1], velocityLeft);
    vdc.setJointVelocity(joint[3], velocityLeft);
    //*/


}

void SKILLS::seguirParedeMLP() {

    vector < double > inputs(6);
    vector < double > direction(4);
    vector< int > capas = {6, 12, 4};
    double distance[4];


    //Vectores de entrenamiento: input (entrenador1) y output deseado (entrenador2)
    //Orden de los sensores: {0,1,2,3,4,5} 
    vector< vector< double > > entrenador1 = {
        {0.262591, 0.240507, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.262506, 0.240418, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.258904, 0.236801, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.256091, 0.233981, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.244013, 0.221896, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.234247, 0.212138, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.228231, 0.206094, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.223078, 0.200915, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.216432, 0.194283, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.211252, 0.189102, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.201986, 0.179809, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.195059, 0.172854, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.185556, 0.163371, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.168885, 0.148944, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.142364, 0.165914, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.154438, 0.177989, 1.000000, 1.000000, 0.289569, 0.297982},
        {0.157969, 0.181523, 1.000000, 1.000000, 0.251758, 0.260172},
        {0.159214, 0.182775, 1.000000, 1.000000, 0.238414, 0.246830},
        {0.159252, 0.183895, 1.000000, 1.000000, 0.231193, 0.239996},
        {0.143615, 0.207866, 1.000000, 1.000000, 0.229104, 0.252051},
        {0.139229, 0.221243, 1.000000, 1.000000, 0.231767, 0.261055},
        {0.137462, 0.237927, 1.000000, 1.000000, 0.234346, 0.270225},
        {0.142652, 0.244309, 1.000000, 1.000000, 0.220948, 0.257251},
        {0.142196, 0.257305, 1.000000, 1.000000, 0.222179, 0.263286},
        {0.147746, 0.264094, 1.000000, 1.000000, 0.209966, 0.251516},
        {0.148173, 0.288799, 1.000000, 1.000000, 0.215684, 0.265903},
        {0.153809, 0.283079, 1.000000, 1.000000, 0.206452, 0.257787},
        {0.157936, 0.235207, 1.000000, 1.000000, 0.218217, 0.280748},
        {0.164590, 0.220389, 1.000000, 1.000000, 0.209795, 0.272889},
        {0.178218, 0.185992, 1.000000, 1.000000, 0.230736, 0.309140},
        {0.186550, 0.174543, 1.000000, 1.000000, 0.224841, 0.304693},
        {0.207117, 0.142898, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.188668, 0.124483, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.183250, 0.121328, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.177156, 0.123045, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.174528, 0.120424, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.172143, 0.118042, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.167382, 0.113263, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.164025, 0.109920, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.156839, 0.102759, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.154711, 0.101599, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.152098, 0.102735, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.145176, 0.096779, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.133532, 0.098550, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.130338, 0.097541, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.125754, 0.099294, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.121543, 0.095091, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.119799, 0.093342, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.116413, 0.089957, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.112788, 0.086348, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.108942, 0.082493, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.106259, 0.079817, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.104013, 0.079923, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.092533, 0.087432, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.092017, 0.086923, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.092159, 0.085982, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.097234, 0.082533, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.090438, 0.075720, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.086703, 0.073044, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.078673, 0.078163, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.078628, 0.078121, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.077938, 0.078473, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.072882, 0.082254, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.074383, 0.083755, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.074971, 0.084349, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.075508, 0.084894, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.077277, 0.084341, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.080512, 0.081994, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.082387, 0.081319, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.083326, 0.080715, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.082991, 0.080378, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.082785, 0.080172, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.082597, 0.079974, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.082204, 0.079591, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.081779, 0.079171, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.081530, 0.078918, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.081392, 0.078783, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.081245, 0.078635, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.081040, 0.078433, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.079422, 0.079153, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.065264, 0.090142, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.070874, 0.095775, 1.000000, 1.000000, 0.338926, 1.000000},
        {0.071017, 0.097002, 1.000000, 1.000000, 0.330650, 0.339936},
        {0.065232, 0.102059, 1.000000, 1.000000, 0.328279, 1.000000},
        {0.069568, 0.107491, 1.000000, 1.000000, 0.294497, 0.308047},
        {0.060039, 0.118239, 1.000000, 1.000000, 0.293604, 0.314395},
        {0.063822, 0.123103, 1.000000, 1.000000, 0.275494, 0.296671},
        {0.060039, 0.130949, 1.000000, 1.000000, 0.274787, 0.300116},
        {0.064681, 0.136707, 1.000000, 1.000000, 0.256785, 0.282513},
        {0.058452, 0.150843, 1.000000, 1.000000, 0.259102, 0.292102},
        {0.062373, 0.155908, 1.000000, 1.000000, 0.247897, 0.281306},
        {0.056601, 0.188454, 1.000000, 1.000000, 0.257412, 0.304504},
        {0.068167, 0.203089, 1.000000, 1.000000, 0.235984, 0.284172},
        {0.092619, 0.204872, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.097932, 0.201909, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.102687, 0.199794, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.108000, 0.197962, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.113939, 0.196305, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.126364, 0.194018, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.157996, 0.192567, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.187067, 0.192409, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.215762, 0.192447, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.252256, 0.192983, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.266417, 0.194656, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.259123, 0.196951, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.254218, 0.198527, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.250838, 0.197514, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.242859, 0.199677, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.241086, 0.198917, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.231390, 0.202948, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.228847, 0.202607, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.219162, 0.207263, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.215416, 0.203489, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.215297, 0.202264, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.222145, 0.199804, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.211133, 0.209371, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.211678, 0.275027, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.223612, 0.268714, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.222658, 0.266746, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.242552, 0.261973, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.224410, 0.241467, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.231779, 0.240585, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.283621, 0.225356, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.276755, 0.225617, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.271139, 0.222242, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.264976, 0.222833, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.245333, 0.202016, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.263782, 0.199285, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.257844, 0.195767, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.240230, 0.198649, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.199186, 0.160057, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.190421, 0.162762, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.182254, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.175089, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.145828, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.148930, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.146550, 0.152995, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.146890, 0.153338, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.147404, 0.153853, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.147720, 0.154167, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.149325, 0.155767, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.149330, 0.158116, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.142775, 0.164384, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.155835, 0.178498, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.148655, 0.184626, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.174529, 0.142300, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.176280, 0.144048, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.177710, 0.145479, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.179287, 0.148076, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.174754, 0.154596, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.182689, 0.162518, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.183768, 0.165821, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.180810, 0.172298, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.184837, 0.176320, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.186075, 0.178624, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.180377, 0.193042, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.138217, 0.224648, 1.000000, 1.000000, 0.287032, 0.317899},
        {0.135869, 0.252173, 1.000000, 1.000000, 0.295045, 0.336579},
        {0.142969, 0.260605, 1.000000, 1.000000, 0.279721, 0.321730},
        {0.153881, 0.337440, 1.000000, 1.000000, 0.327472, 1.000000},
        {0.160584, 0.325346, 1.000000, 1.000000, 0.320431, 1.000000},
        {0.188188, 0.264159, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.238832, 0.224458, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.307607, 0.201069, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.329818, 0.193969, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.314307, 0.188151, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.294214, 0.169094, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.269016, 0.167607, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.255976, 0.155512, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.214773, 0.161965, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.199338, 0.148720, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.184173, 0.155020, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.181190, 0.154301, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.167814, 0.159073, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.159168, 0.152650, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.153540, 0.156162, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.156251, 0.158860, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.156330, 0.158928, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.156417, 0.159004, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.156580, 0.159166, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.157931, 0.160499, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.158194, 0.160762, 1.000000, 0.200249, 1.000000, 1.000000},
        {0.158602, 0.161169, 1.000000, 0.138982, 1.000000, 1.000000},
        {0.159308, 0.160863, 1.000000, 0.123415, 1.000000, 1.000000},
        {0.167528, 0.154952, 1.000000, 0.114832, 1.000000, 1.000000},
        {0.166677, 0.151665, 1.000000, 0.084217, 1.000000, 1.000000},
        {0.172221, 0.148830, 1.000000, 0.082424, 1.000000, 1.000000},
        {0.169663, 0.145245, 1.000000, 0.070621, 1.000000, 1.000000},
        {0.179913, 0.142159, 1.000000, 0.074202, 1.000000, 1.000000},
        {0.175489, 0.144674, 1.000000, 0.070865, 1.000000, 1.000000},
        {0.180070, 0.141690, 1.000000, 0.074473, 1.000000, 1.000000},
        {0.171773, 0.133401, 0.194745, 0.071996, 1.000000, 1.000000},
        {0.170248, 0.131872, 0.183784, 0.071547, 1.000000, 1.000000},
        {0.167028, 0.128660, 0.160660, 0.074196, 1.000000, 1.000000},
        {0.163463, 0.125104, 0.135108, 0.082649, 1.000000, 1.000000},
        {0.159572, 0.121210, 0.115810, 0.091911, 1.000000, 1.000000},
        {0.154837, 0.116469, 0.101221, 0.103188, 0.327015, 0.313322},
        {0.152094, 0.113724, 0.092731, 0.112088, 0.308914, 0.295220},
        {0.158685, 0.120320, 0.113058, 0.094032, 1.000000, 0.338594},
        {0.162239, 0.123876, 0.126246, 0.085574, 1.000000, 1.000000},
        {0.165962, 0.127594, 0.153038, 0.076723, 1.000000, 1.000000},
        {0.169009, 0.130638, 0.174964, 0.071187, 1.000000, 1.000000},
        {0.171714, 0.133344, 0.194457, 0.071997, 1.000000, 1.000000},
        {0.174417, 0.136054, 0.230617, 0.072802, 1.000000, 1.000000},
        {0.176617, 0.138253, 0.270557, 0.073460, 1.000000, 1.000000},
        {0.178820, 0.140450, 1.000000, 0.074120, 1.000000, 1.000000},
        {0.182543, 0.144172, 1.000000, 0.075233, 1.000000, 1.000000},
        {0.187439, 0.149077, 1.000000, 0.083581, 1.000000, 1.000000},
        {0.191995, 0.153645, 1.000000, 0.097652, 1.000000, 1.000000},
        {0.195697, 0.157357, 1.000000, 0.109125, 1.000000, 1.000000},
        {0.198559, 0.160233, 1.000000, 0.117988, 1.000000, 1.000000},
        {0.201258, 0.162934, 1.000000, 0.131689, 1.000000, 1.000000},
        {0.203786, 0.165469, 1.000000, 0.149974, 1.000000, 1.000000},
        {0.209864, 0.171555, 1.000000, 0.193849, 1.000000, 1.000000},
        {0.213409, 0.175101, 1.000000, 0.244441, 1.000000, 1.000000},
        {0.219813, 0.179120, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.233312, 0.170024, 1.000000, 0.265944, 1.000000, 1.000000},
        {0.209571, 0.176031, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.176268, 0.318845, 1.000000, 1.000000, 0.260049, 0.216972},
        {0.191028, 1.000000, 1.000000, 1.000000, 0.228343, 0.220989},
        {0.215843, 1.000000, 1.000000, 1.000000, 0.213932, 0.233093},
        {0.252258, 1.000000, 1.000000, 1.000000, 0.219864, 0.274324},
        {0.322819, 1.000000, 1.000000, 1.000000, 0.236884, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 0.299289, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.212578, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.195752, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.149145, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.129369, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.122439, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.195956, 0.110284, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.174598, 0.119649, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.112816, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.121399, 0.283345, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.121330, 0.316419, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.131844, 0.264019, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.132090, 0.279825, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.143081, 0.241160, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.141539, 0.265468, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.150582, 0.241470, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.149894, 0.251838, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.163578, 0.222836, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.159337, 0.240980, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.182603, 0.201613, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.165065, 0.257773, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.187287, 0.218846, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.178574, 0.254088, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.194159, 0.228101, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.188037, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.224797, 0.259481, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.222705, 0.264327, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.295802, 0.212501, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.239912, 0.234314, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.251153, 0.225821, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.245094, 0.228967, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.265221, 0.216087, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.242663, 0.228100, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.270200, 0.211394, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.261032, 0.214029, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.182519, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.183017, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.139533, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.136935, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.191329, 0.140541, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.205607, 0.135099, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.180352, 0.143713, 1.000000, 1.000000, 0.317905, 0.323877},
        {0.098975, 1.000000, 1.000000, 1.000000, 0.335206, 1.000000},
        {0.102811, 1.000000, 1.000000, 1.000000, 0.317222, 1.000000},
        {0.150672, 0.299934, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.234472, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.223948, 1.000000, 1.000000, 1.000000, 1.000000},
        {1.000000, 0.211145, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.323707, 0.201922, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.307152, 0.188289, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.262134, 0.185473, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.257781, 0.182137, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.211860, 0.195433, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.208463, 0.194332, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.197915, 0.200285, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.201081, 0.203417, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.201114, 0.203450, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.201242, 0.203578, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.201494, 0.203824, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.202225, 0.204538, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.202428, 0.204735, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.201806, 0.205156, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.199305, 0.206752, 1.000000, 1.000000, 1.000000, 1.000000},
        {0.201430, 0.208864, 1.000000, 1.000000, 1.000000, 1.000000},
    };


    //Orden de los motores: {a,b}, a-> motor derecho, b->motor izquierdo
    vector< vector< double > > entrenador2 = {
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {1, 0, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 0, 1},
        {0, 0, 1, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {0, 0, 1, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {1, 0, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
        {0, 1, 0, 0},
    };



    //Creamos la red
    cout << "Creando red..." << endl;
    Network red(capas);
    cout << "Red creada" << endl;

    //Entrenamos la red con los ejemplos
    cout << "Entrenando red..." << endl;
    red.Aprendizaje_Prop_Atras(entrenador1, entrenador2);
    cout << "Red entrenada" << endl;

    //red.Mostrar_Pesos(); //Mostramos los pesos definitivos

    //Mostrar los outputs:
    for (int i = 0; i < entrenador1.size(); i++) {
        red.Calcular_Output(entrenador1[i]);
        red.Mostrar_Output();
    }


    while (VDC::simulationIsActive()) {


        for (int i = 0; i < 6; i++) {

            distance[i] = VDC::getDistance(sensor[i]);


        }

        for (int i = 0; i < 6; i++) {
            inputs[i] = distance[i];
        }

        direction = red.Calcular_Output(inputs);




        for (int i = 0; i < 4; i++) {
            if (direction[i])
                cout << "1";
            else
                cout << "0";
        }
        cout << endl;

        // frente 0,1,0,0
        // ré 0,0,0,1
        // direita 0,0,1,0
        // esquerda 1,0,0,0
        if (!direction[0] && direction[1] && !direction[2] && !direction[3])
            SKILLS::setVelocityInRobot(0.5, 0.5);

        if (!direction[0] && !direction[1] && !direction[2] && direction[3])
            SKILLS::setVelocityInRobot(-0.5, -0.5);

        if (!direction[0] && !direction[1] && direction[2] && !direction[3])
            SKILLS::setVelocityInRobot(-0.5, 0.5);

        if (direction[0] && !direction[1] && !direction[2] && !direction[3])
            SKILLS::setVelocityInRobot(0.5, -0.5);


    }
}

void SKILLS::verDistancia(int i) {
    double teste = VDC::getDistance(sensor[i]);
    cout << "distancia entre 0 e 1:  " << teste << endl;

}

bool SKILLS::controlerRobot() {


    //cout << "\n\n  os controles são: w ,s,a,d \n  e a letra:e para sair\n";


    system("stty raw");

    char input = getchar();

    switch (input) {
        case 'w':
            SKILLS::setVelocityInRobot(0.5, 0.5);
            controlData = ",0,1,0,0"; // frente 0,1,0,0
            return true;
        case 's':
            SKILLS::setVelocityInRobot(-0.5, -0.5);
            controlData = ",0,0,0,1"; // ré 0,0,0,1
            return true;

        case 'd':
            SKILLS::setVelocityInRobot(-0.5, 0.5);
            controlData = ",0,0,1,0"; // direita 0,0,1,0
            return true;

        case 'a':
            SKILLS::setVelocityInRobot(0.5, -0.5);
            controlData = ",1,0,0,0"; // esquerda 1,0,0,0
            return true;

        case 'q':
            SKILLS::takePhotos();
            countImage++;
            return true;


        case 'e':
            system("stty cooked");
            VDC::finish();
            return true;



    }

    return false;
}

void SKILLS::collectDataforMLP() {
    Extras extras;
    string data;
    string header = "sensor1,sensor2,sensor3,sensor4,sensor5,sensor6,a,w,d,s";
    string fileName = "inputMlP.csv";
    double distance[6];

    while (VDC::simulationIsActive()) {

        for (int i = 0; i < 6; i++) {
            distance[i] = VDC::getDistance(sensor[i]);
        }
        if (SKILLS::controlerRobot()) {
            data = to_string(distance[0]);
            data += "," + to_string(distance[1]);
            data += "," + to_string(distance[2]);
            data += "," + to_string(distance[3]);
            data += "," + to_string(distance[4]);
            data += "," + to_string(distance[5]);
            data += controlData;

            extras.logCsv(data.c_str(), fileName.c_str(), header.c_str());
        }

    }



}

void SKILLS::takePhotos() {
    Mat vrep;
    string nameImage = "ImageFromVrep" + to_string(countImage) + ".jpg";

    if (VDC::imageVrepToOpencv(Webcam, vrep))
        imwrite(nameImage.c_str(), vrep);
}

void SKILLS::controlTheRobot(){
    
    while (VDC::simulationIsActive()){
        
        SKILLS::controlerRobot();
        
    }
    
}